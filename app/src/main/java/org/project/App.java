package org.project;

import org.project.data.OsData;
import org.project.frames.entry.EntryFrame;
import org.project.frames.home.HomeFrame;
import org.project.models.Store;
import org.project.models.User;
import org.project.services.StoreService;

import javax.swing.*;
import java.io.IOException;
import java.nio.file.Path;

public class App {
    private static final Path appDir = OsData.getUserDataPath();
    private static User currentUser;
    private static Store currentStore;
    public static HomeFrame homeFrame;
    public static EntryFrame entryFrame;
    private static StoreService storeService;

    public static void main(String[] args) throws IOException {
        initializeAppStorage();
        initializeServices();
        startEntryFrame();
    }

    public static void initializeAppStorage() {
        OsData.createDirectoryIfNotExist();
    }

    public static void initializeServices() {
        storeService = new StoreService();
        // Diğer servisleri başlatın
    }

    public static void startEntryFrame() {
        SwingUtilities.invokeLater(() -> entryFrame = new EntryFrame());
    }

    public static Path getAppDir() {
        return appDir;
    }

    public static Store getCurrentStore() {
        return currentStore;
    }

    public static void setCurrentStore(Store currentStore) {
        App.currentStore = currentStore;
    }

    public static void saveCurrentStore() {
        storeService.update(currentStore);
    }

    public static void switchToHomeFrame() {
        currentStore = storeService.getStoreById(currentUser.getStoreId());
        entryFrame.dispose();
        SwingUtilities.invokeLater(() -> homeFrame = new HomeFrame());
    }

    public static User getCurrentUser() {
        return currentUser;
    }

    public static void setCurrentUser(User currentUser) {
        App.currentUser = currentUser;
    }
}
/*
 * This source file was generated by the Gradle 'init' task
 */
/*
package org.project;


import org.project.data.JsonRepository;
import org.project.data.OsData;
import org.project.frames.entry.EntryFrame;
import org.project.frames.home.HomeFrame;
import org.project.models.*;
import org.project.services.*;

import javax.swing.*;
import java.io.IOException;
import java.nio.file.Path;


public class App {
    private static final Path appDir = OsData.getUserDataPath();
    private static User currentUser;
    private static Store currentStore;
    public static HomeFrame homeFrame;
    public static EntryFrame entryFrame;

    public static void main(String[] args) throws IOException {
        initializeAppStorage();
        initializeServices();
        startEntryFrame();
    }
    public static void initializeAppStorage(){
        OsData.createDirectoryIfNotExist();
    }
    public static void initializeServices(){
        UserService userService = new UserService();
        ProductService productService= new ProductService();
        ImageService imageService=new ImageService();
        CargoService cargoService=new CargoService();
        ReceiverService receiverService=new ReceiverService();
        OrderService orderService=new OrderService();
        StoreService storeService=new StoreService();
    }
    public static void startEntryFrame() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                entryFrame=new EntryFrame();
            }
        });
    }
    public static Path getAppDir() {
        return appDir;
    }

    public static Store getCurrentStore() {
        return currentStore;
    }

    public static void setCurrentStore(Store currentStore) {
        App.currentStore = currentStore;
    }

    public static void switchToHomeFrame() {
        StoreService storeService=new StoreService();
        currentStore=storeService.getStoreById(currentUser.getStoreId());
        entryFrame.dispose();
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                homeFrame= new HomeFrame();
            }
        });
    }

    public static User getCurrentUser() {
        return currentUser;
    }

    public static void setCurrentUser(User currentUser) {
        App.currentUser = currentUser;
    }
}
*/






